/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Dao.PerformanceDao;
import Dao.QuestionDao;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import pojo.AnswerPojo;
import pojo.AnswerStorePojo;
import pojo.Exampojo;
import pojo.PerformancePojo;
import pojo.QuestionPojo;
import pojo.QuestionStore;
import pojo.Userprofile;

/**
 *
 * @author Sunakshi Sharma
 */
public class TakeTestFrame extends javax.swing.JFrame {

    private Exampojo exam;
    private QuestionStore qstore;
    private AnswerStorePojo astore;
    private AnswerPojo answer;

    private int qno, pos = 0;

    public TakeTestFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        Toolkit tk = Toolkit.getDefaultToolkit();
        Image img = tk.getImage("C:/Users/Sunakshi Sharma/OneDrive/Pictures/project/icon.png");
        this.setIconImage(img);
        this.setTitle("online exam application");
        qstore = new QuestionStore();
        astore = new AnswerStorePojo();
        qno = 1;
        lblQue.setText("QUESTION : " + qno);
        
        

    }

    public TakeTestFrame(Exampojo exam) {
        this();
        this.exam = exam;
        lblTitle.setText(exam.getLanguage().toUpperCase() + " PAPER");
        loadQuestions();
        showQuestion();
        TimeCounter tc=new TimeCounter();
        tc.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblQue = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtQuestion = new javax.swing.JTextArea();
        rbOption1 = new javax.swing.JRadioButton();
        rbOption2 = new javax.swing.JRadioButton();
        rbOption3 = new javax.swing.JRadioButton();
        rbOption4 = new javax.swing.JRadioButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnDone = new javax.swing.JButton();
        lblTimeCounter = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        lblTitle.setBackground(new java.awt.Color(0, 0, 0));
        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 153, 0));

        lblQue.setBackground(new java.awt.Color(0, 0, 0));
        lblQue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblQue.setForeground(new java.awt.Color(255, 153, 0));

        txtQuestion.setColumns(20);
        txtQuestion.setRows(5);
        jScrollPane1.setViewportView(txtQuestion);

        rbOption1.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(rbOption1);
        rbOption1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbOption1.setForeground(new java.awt.Color(255, 153, 0));

        rbOption2.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(rbOption2);
        rbOption2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbOption2.setForeground(new java.awt.Color(255, 153, 0));
        rbOption2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOption2ActionPerformed(evt);
            }
        });

        rbOption3.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(rbOption3);
        rbOption3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbOption3.setForeground(new java.awt.Color(255, 153, 0));

        rbOption4.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(rbOption4);
        rbOption4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbOption4.setForeground(new java.awt.Color(255, 153, 0));

        btnPrev.setBackground(new java.awt.Color(0, 0, 0));
        btnPrev.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnPrev.setForeground(new java.awt.Color(255, 153, 0));
        btnPrev.setText("prev");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnNext.setBackground(new java.awt.Color(0, 0, 0));
        btnNext.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnNext.setForeground(new java.awt.Color(255, 153, 0));
        btnNext.setText("next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(0, 0, 0));
        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 153, 0));
        btnCancel.setText("cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDone.setBackground(new java.awt.Color(0, 0, 0));
        btnDone.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnDone.setForeground(new java.awt.Color(255, 153, 0));
        btnDone.setText("Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        lblTimeCounter.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lblTimeCounter.setForeground(new java.awt.Color(255, 153, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnPrev)
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnNext)
                                .addGap(91, 91, 91)
                                .addComponent(btnCancel)
                                .addGap(38, 38, 38)
                                .addComponent(btnDone))
                            .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblQue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbOption1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(rbOption3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(rbOption4, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                                    .addComponent(rbOption2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(15, 15, 15))
                            .addComponent(lblTimeCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(lblTimeCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(lblQue, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbOption1)
                    .addComponent(rbOption2))
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbOption3)
                    .addComponent(rbOption4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrev)
                    .addComponent(btnNext)
                    .addComponent(btnCancel)
                    .addComponent(btnDone))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbOption2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOption2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbOption2ActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        String chosenAnswer = getUserAnswer();
        if (chosenAnswer != null) {
            QuestionPojo question = qstore.getQuestionByQno(qno);
            String correctAnswer = question.getCorrect_ans();
            AnswerPojo newanswer = new AnswerPojo(exam.getExamId(), exam.getLanguage(), qno, chosenAnswer, correctAnswer);
            System.out.println(newanswer);
            AnswerPojo answer = astore.getAnswerByQno(qno);
            if (answer == null) {
                astore.addAnswer(newanswer);
            } else {
                if (newanswer.getChosenAnswer().equals(answer.getChosenAnswer()) == false) {
                    int apos = astore.removeAnswer(answer);
                    astore.setAnswerAt(apos, newanswer);
                }
            }
            pos++;
            if (pos >= qstore.getCount()) {
                pos = 0;
            }
            qno++;
            if (qno > qstore.getCount()) {
                qno = 1;
            }
            lblQue.setText("Question no:" + qno);
            showQuestion();
        }

    }//GEN-LAST:event_btnNextActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        ChoosePaperFrame fr = new ChoosePaperFrame();
        fr.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        String chosenAnswer = getUserAnswer();
        if (chosenAnswer != null) {
            QuestionPojo question = qstore.getQuestionByQno(qno);
            String correctAnswer = question.getCorrect_ans();
            AnswerPojo newanswer = new AnswerPojo(exam.getExamId(), exam.getLanguage(), qno, chosenAnswer, correctAnswer);
            System.out.println(newanswer);
            AnswerPojo answer = astore.getAnswerByQno(qno);
            if (answer == null) {
                astore.addAnswer(newanswer);
            } else {
                if (newanswer.getChosenAnswer().equals(answer.getChosenAnswer()) == false) {
                    int apos = astore.removeAnswer(answer);
                    astore.setAnswerAt(apos, newanswer);
                }
            }
        }
        pos--;
        if (pos < 0) {
            pos = qstore.getCount() - 1;
        }
        qno--;
        if (qno <= 0) {
            qno = qstore.getCount();
        }
        lblQue.setText("QUESTION : " + qno);
        showQuestion();


    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        String userAnswer = getUserAnswer();
        if (userAnswer != null) {

            QuestionPojo question = qstore.getQuestionByQno(qno);
            String correctAnswer = question.getCorrect_ans();
            AnswerPojo newanswer = new AnswerPojo(exam.getExamId(), exam.getLanguage(), qno, userAnswer, correctAnswer);
            System.out.println(newanswer);
            AnswerPojo answer = astore.getAnswerByQno(qno);
            if (answer == null) {
                astore.addAnswer(newanswer);
            } else {
                if (newanswer.getChosenAnswer().equals(answer.getChosenAnswer()) == false) {
                    int apos = astore.removeAnswer(answer);
                    astore.setAnswerAt(apos, newanswer);
                }
            }
        }
        int right = 0, wrong = 0;
        for (QuestionPojo question : qstore.getAllQuestions()) {
            int qno = question.getQno();
            AnswerPojo answer = astore.getAnswerByQno(qno);
            if (answer == null) {
                continue;
            } else {
                String chosenAnswer1 = answer.getChosenAnswer();
                String correctAnswer = answer.getCorrectAnswer();
                if (chosenAnswer1.equals(correctAnswer)) {
                    ++right;
                } else {
                    ++wrong;
                }

            }
        }
        String reportCard = "Total Questions:" + qstore.getCount();
        reportCard += "\nRight Answers:" + right;
        reportCard += "\nWrong Answers:" + wrong;
        reportCard += "\nUnAttempted  :" + (qstore.getCount() - (right + wrong));
        JOptionPane.showMessageDialog(null, reportCard, "Your Result!", JOptionPane.INFORMATION_MESSAGE);
        try {
            PerformancePojo performance = new PerformancePojo(exam.getExamId(), exam.getLanguage(), Userprofile.userid, right, wrong, (qstore.getCount() - (right + wrong)), (double) right / qstore.getCount() * 100);
            PerformanceDao.addPerformance(performance);
            JOptionPane.showMessageDialog(null, "Your performance has been successfully added to the database", " Performance Added!", JOptionPane.INFORMATION_MESSAGE);
            ChoosePaperFrame paperFrame = new ChoosePaperFrame();
            paperFrame.setVisible(true);
            this.dispose();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error while connecting to DB!", "Exception!", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }


    }//GEN-LAST:event_btnDoneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TakeTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TakeTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TakeTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TakeTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TakeTestFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblQue;
    private javax.swing.JLabel lblTimeCounter;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JRadioButton rbOption1;
    private javax.swing.JRadioButton rbOption2;
    private javax.swing.JRadioButton rbOption3;
    private javax.swing.JRadioButton rbOption4;
    private javax.swing.JTextArea txtQuestion;
    // End of variables declaration//GEN-END:variables

    class TimeCounter extends Thread {

        private long durationInMillis = exam.getTotalQuestions() * 20 * 1000;

        @Override
        public void run() {
            while(durationInMillis>=0){
                try{
                    long millis=durationInMillis % 1000;
                    long second=(durationInMillis / 1000) % 60;
                    long minute=((durationInMillis /1000) / 60) % 60;
                    long hour=((durationInMillis / 1000) / 60 / 60) % 24;
                    String time=String.format("%02dh:%02dm:%02ds",hour,minute,second,millis);
                    lblTimeCounter.setText("Time Remaining : "+time);
                    Thread.sleep(1000);
                    durationInMillis=durationInMillis-1000;
                }catch(InterruptedException e){
                    e.printStackTrace();
                }
            }
            btnDone.doClick();
            JOptionPane.showMessageDialog(null, "Click on Done button for submitting the Exam","Time Over!!",JOptionPane.INFORMATION_MESSAGE);

        }

    }

    private void loadQuestions() {
        try {
            ArrayList<QuestionPojo> questionList = QuestionDao.getQuestionByExamId(exam.getExamId());
            for (QuestionPojo obj : questionList) {
                qstore.addQuestion(obj);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error while connecting to DB!", "Exception!", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }

    }

    private void showQuestion() {
        QuestionPojo question = qstore.getQuestion(pos);
        buttonGroup1.clearSelection();
        txtQuestion.setText(question.getQuestion());
        rbOption1.setText(question.getAnswer1());
        rbOption2.setText(question.getAnswer2());
        rbOption3.setText(question.getAnswer3());
        rbOption4.setText(question.getAnswer4());
        answer = astore.getAnswerByQno(qno);
        if (answer == null) {
            return;
        }
        String chosenAnswer = answer.getChosenAnswer();
        switch (chosenAnswer) {
            case "answer1":
                rbOption1.setSelected(true);
                break;
            case "answer2":
                rbOption2.setSelected(true);
                break;
            case "answer3":
                rbOption3.setSelected(true);
                break;
            case "answer4":
                rbOption4.setSelected(true);
                break;
        }

    }

    private String getUserAnswer() {
        if (rbOption1.isSelected()) {
            return "answer1";
        } else if (rbOption2.isSelected()) {
            return "answer2";
        } else if (rbOption3.isSelected()) {
            return "answer3";
        } else if (rbOption4.isSelected()) {
            return "answer4";
        } else {
            return null;
        }

    }

}
